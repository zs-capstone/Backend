version: '3'

networks:
  front-network:
    driver: bridge
  back-network:
    driver: bridge

services:
  nginx:
    restart: always
    container_name: capstone_nginx
    build:
      context: ./nginx
      dockerfile: DockerFile
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
    networks:
      - front-network
      - back-network

  redis:
    image: redis:alpine
    container_name: capstone_redis
    ports:
      - "6379:6379"
    networks:
      - back-network

  backend:
    restart: always
    container_name: capstone_backend
    build:
      context: ./
      dockerfile: DockerFile
    networks:
      - front-network
      - back-network
    ports:
      - "8080:8080"
    expose:
      - 8080
    environment:
      SPRING_DATASOURCE_driver-class-name: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_URL: jdbc:mysql://${RDS_ENDPOINT}:3306/capstone?useSSL=false
      SPRING_DATASOURCE_USERNAME: ${RDS_USER}
      SPRING_DATASOURCE_PASSWORD: ${RDS_PASSWORD}
#      SPRING_DATASOURCE_URL: jdbc:mysql://capstone-db.cyqecu7zmnip.ap-northeast-2.rds.amazonaws.com:3306/capstone?useSSL=false
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: capstone1234
      SPRING_REDIS_HOST: redis
      JWT_SECRET: ${JWT_SECRET}
      CLOUD_AWS_CREDENTIALS_ACCESSKEY: ${AWS_ACCESS_KEY_ID}
      CLOUD_AWS_CREDENTIALS_SECRETKEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - redis
      - flask

  flask:
    restart: always
    container_name: capstone_flask
    build:
      context: ./flask
      dockerfile: DockerFile
    environment:
      - APP_NAME=CAPSTONE_AI
      - DATABASE_URL=jdbc:mysql://${RDS_ENDPOINT}:3306/capstone?useSSL=false
    networks:
      - back-network
    ports:
      - "6000:6000"
    expose:
      - 6000